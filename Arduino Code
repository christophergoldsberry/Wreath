/* Play Melody
 * -----------
 *
 * Program to play a simple melody
 *
 * Tones are created by quickly pulsing a speaker on and off 
 *   using PWM, to create signature frequencies.
 *
 * Each note has a frequency, created by varying the period of 
 *  vibration, measured in microseconds. We'll use pulse-width
 *  modulation (PWM) to create that vibration.

 * We calculate the pulse-width to be half the period; we pulse 
 *  the speaker HIGH for 'pulse-width' microseconds, then LOW 
 *  for 'pulse-width' microseconds.
 *  This pulsing creates a vibration of the desired frequency.
 *
 * (cleft) 2005 D. Cuartielles for K3
 * Refactoring and comments 2006 clay.shirky@nyu.edu
 * See NOTES in comments at end for possible improvements
 */

/* CONSTANTS */
// TONES  ==========================================
// Start by defining the relationship between 
// note, period, &  frequency. 
int c = 3830;// 261 Hz 
int d = 3400;// 294 Hz 
int e = 3038;// 329 Hz 
int f = 2864;// 349 Hz 
int g = 2550;// 392 Hz 
int a = 2272;// 440 Hz 
int b = 2028;// 493 Hz 
int C = 1912;// 523 Hz 
// Define a special note, 'R', to represent a rest
int R = 0;

// BUTTON PINS ====================================
const int buttonPin = 2;
const int ledStringOne = 5;
const int ledStringTwo = 6;
const int ledStringThree = 7;
const int ledStringFour = 8;
const int ledStringFive = 9;
const int ledStringSix = 10;
const int ledStringSeven = 11;
const int ledStringEight = 12;
int ledArray[] = {ledStringOne, ledStringTwo, ledStringThree, ledStringFour, ledStringFive, ledStringSix, ledStringSeven, ledStringEight};
int ledPWMArray[] = {ledStringOne, ledStringTwo, ledStringFive, ledStringSix, ledStringSeven};
int currentBrightness;

// Set up speaker on a PWM pin (digital 9, 10 or 11)
int speakerOut = 3;

// Do we want debugging on serial out? 1 for yes, 0 for no
int DEBUG = 1;

// Set up our interrupt-triggered variable and debounce timer which will flip if the button is pushed
volatile int songActivated = 0;
volatile int debounceMillis;

// SETUP ============================================
void setup() { 
  pinMode(speakerOut, OUTPUT);
  if (DEBUG) { 
    Serial.begin(9600); // Set serial out if we want debugging
  } 
  pinMode(buttonPin, INPUT);
  
  attachInterrupt(0, activateSong, LOW);
  
  for(int h = 0; h< 7; h++) {
    pinMode(ledArray[h], OUTPUT);
  }
}

// MELODY and TIMING  =======================================
//  melody[] is an array of notes, accompanied by beats[], 
//  which sets each note's relative length (higher #, longer note) 
int melody[] = {  e,    e,   e,   e,   e,   e,   e,   g,   c,   d,  e,   R,  f,  f,  f,  f,  f,  e,  e, e, e,  g,  g,  f,  d,  c};
int beats[]  = {  16,  16,  32,  16,  16,  32,  16,  16,  24,  8,  32, 128, 16, 16, 24,  8, 16, 16, 16, 8, 8, 16, 16, 16, 16, 32}; //Rest beats are very long because the 'rest' is quicker to execute, so we have to compensate. See notes.
int MAX_COUNT = sizeof(melody) / 2; // Melody length, for looping.

// Set overall tempo
long tempo = 20000;
// Set length of pause between notes
int pause = 1000;
// Loop variable to increase Rest length
int rest_count = 100; //<-BLETCHEROUS HACK; See NOTES

// Initialize core variables
int tone_ = 0;
int beat = 0;
long duration  = 0;

// JINGLE BELLS ==============================================
// jingleBells is the function called by our interrupt. It plays Jingle Bells 
// if the pushbutton is pulled low. In turn, it calls PlayTone().

void jingleBells(){ 
  if(songActivated == 1){
  // Set up a counter to pull from melody[] and beats[]
  for (int i=0; i < MAX_COUNT; i++) {
    tone_ = melody[i];
    beat = beats[i];

    duration = beat * tempo; // Set up timing

    playTone(); 
    // A pause between notes...
    delayMicroseconds(pause);

    if (DEBUG) { // If debugging, report loop, tone, beat, and duration
      Serial.print(i);
      Serial.print(":");
      Serial.print(beat);
      Serial.print(" ");    
      Serial.print(tone_);
      Serial.print(" ");
      Serial.println(duration);
    }
  }
}
  else{
    return;
  }
}

void activateSong(){
  if(songActivated == 0){
      songActivated = 1;
  }
  else{
    return;
  }
}

// PLAY TONE  ==============================================
// Pulse the speaker to play a tone for a particular duration
void playTone(){
  long elapsed_time = 0;
  if (tone_ > 0) { // if this isn't a Rest beat, while the tone has 
    //  played less long than 'duration', pulse speaker HIGH and LOW
    while (elapsed_time < duration) {

      digitalWrite(speakerOut,HIGH);
      delayMicroseconds(tone_ / 2);

      // DOWN
      digitalWrite(speakerOut, LOW);
      delayMicroseconds(tone_ / 2);

      // Keep track of how long we pulsed
      elapsed_time += (tone_);
    } 
  }
  else { // Rest beat; loop times delay
    for (int j = 0; j < rest_count; j++) { // See NOTE on rest_count
      delayMicroseconds(duration);  
    }                                
  }                                 
}



// SET THE NIGHT ON FIIIIIIRE =============================
void loop() {

// RANDOM NUMBERS FOR TWINKLING
long brightnessLowerBound = random(0,30);
long randomLED = random(0,4);
long randomDelayTime = random(10,50);
int fadeAmount = 5;
int counter = 0;
int brightness = 255;

//Initialize all LED Pins to on and set to max brightness
  for(int p = 0; p<8; p++){
    digitalWrite(ledArray[p], HIGH); 
  }
  
  while(counter < 2){
    analogWrite(ledPWMArray[randomLED], brightness);    

  // change the brightness for next time through the loop:
    brightness = brightness - fadeAmount;
 //   Serial.println(brightness);

  // reverse the direction of the fading at the ends of the fade: 
    if (brightness == 0 || brightness == 255) {
      fadeAmount = -fadeAmount ; 
      counter ++;
      }     
  // wait for 30 milliseconds to see the dimming effect    
    delay(randomDelayTime);
  }
  
 if(DEBUG){
  Serial.print("Song Activated toggle is currently set at ");
  Serial.println(songActivated);
  }

  if(songActivated == 1){
    jingleBells();
    songActivated = 0;
  }
  
}